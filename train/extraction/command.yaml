$schema: https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json
type: command

name: extraction
display_name: Extraction
description: Extract images from pdfs
version: 0.0.1
is_deterministic: true

inputs:
  pdfs_input:
    type: uri_folder

outputs:
  images_output:
    type: uri_folder
  hash_output:
    type: uri_folder

environment:
  name: extraction_environment
  build:
    path: ./

additional_includes:
   - "../../packages"


code: ./

command: >
  set -euo pipefail

  # 1) Installer pip à jour + uv (PAS "venv")
  python -m pip install --upgrade pip uv

  # 2) Créer le venv géré par uv (pas besoin de "source")
  uv venv

  # 3) Recréer l'arbo pour les deps path ../../packages/...
  mkdir -p ../../packages

  # 4) Copier TOUS les sous-dossiers de ./packages/ s'il existe
  if [ -d "./packages" ]; then
    # boucle robuste même si vide
    for d in ./packages/*; do
      [ -d "$d" ] || continue
      name="$(basename "$d")"
      echo "→ Copie du package: $name"
      rm -rf "../../packages/$name"
      cp -a "$d" "../../packages/$name"
    done
  else
    echo "ℹ️ Aucun dossier ./packages — copie ignorée."
  fi

  # 5) Installer les deps (au choix)
  # - Installe deps + projet en non-editable :
  UV_HTTP_TIMEOUT=300 uv sync --no-editable
  # - (ou) seulement les deps, sans le projet :
  # UV_HTTP_TIMEOUT=300 uv sync --no-install

  # 6) Lancer ton script dans le venv créé par uv
  uv run python command.py \
    --pdfs_input ${{inputs.pdfs_input}} \
    --images_output ${{outputs.images_output}} \
    --hash_output ${{outputs.hash_output}}
