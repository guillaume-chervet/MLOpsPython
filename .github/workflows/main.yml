name: Python Continuous Integration

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PNPM_VERSION: 8.5.1
  PYTHON_VERSION: 3.10.15
  NODE_VERSION: 18
  AZURE_RESOURCE_GROUP_NAME: "azure-ml-gui"
  AZURE_LOCATION: "northeurope"
  AZURE_ML_WORKSPACE_NAME: "cats-dogs-gui"
  AZURE_WEBAPP_NAME: "cats-dogs-gui"
  DELETE_WEBAPP: "false"
  DOCKER_API_IMAGE_NAME: "mlopspython-api"
  DOCKER_REPOSITORY: ${{ github.repository_owner }}
  DOCKER_WEBAPP_IMAGE_NAME: "mlopspython-webapp"
  DOCKER_REGISTRY: "ghcr.io"

permissions:
  id-token: write
  contents: write
  packages: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v2
        id: filter_python
        with:
          filters: |
            packages:
              - 'packages/**'
            production:
              - 'production/**'
            train:
              - 'train/**'

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
            python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv --version

      - name: Sync dev dependencies (root)
        run: uv sync --group dev

      - name: Format with Black
        run: |
          uv run black train
          uv run black train --check

      - name: Lint with flake8
        run: uv run flake8 .

  packages_unit_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv --version

      - name: Test Packages Extraction
        working-directory: packages/mlopspython-extraction
        run: |
          uv sync --group dev
          uv run coverage run -m unittest tests.extraction_tests
          uv run coverage report

      - name: Test Packages Inference
        working-directory: packages/mlopspython-inference
        run: |
          uv sync --group dev
          # uv run coverage run -m unittest tests.inference_tests
          # uv run coverage report

  train_unit_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv --version

      - name: Build packages (Makefile)
        run: |
          chmod +x ./Makefile || true
          ./Makefile || true

      - name: Unit tests - Extraction (train/extraction)
        working-directory: train/extraction
        run: |
          uv sync --group dev
          # uv run coverage run -m unittest tests.extraction_test
          # uv run coverage report

      - name: Unit tests - Label Split Data (train/label_split_data)
        working-directory: train/label_split_data
        run: |
          uv sync --group dev
          uv run coverage run -m unittest tests.label_split_data_test
          uv run coverage report

      # - name: Unit tests - Train
      #   working-directory: train/train
      #   run: |
      #     uv sync --group dev
      #     uv run python -m unittest tests.train_test

      # - name: Unit tests - Evaluate
      #   working-directory: train/test
      #   run: |
      #     uv sync --group dev
      #     uv run python -m unittest tests.evaluate_test

  tags:
    runs-on: ubuntu-latest
    needs: [train_unit_tests, packages_unit_tests]
    outputs:
      new_version: ${{ steps.tag.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Bump version and push tag
        id: tag_version
        if: github.ref == 'refs/heads/main'
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Add tag to output step for main branch
        id: tag
        run: |
          if [ '${{ github.ref }}' = 'refs/heads/main' ]; then
            echo "new_version=${{ steps.tag_version.outputs.new_version }}" >> $GITHUB_OUTPUT
          else
            echo "new_version=pr-${{ github.event.number }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

  train:
    runs-on: ubuntu-latest
    environment: MLOpsPython
    needs: tags
    outputs:
      MODEL_VERSION: ${{ steps.train.outputs.MODEL_VERSION }}
      INTEGRATION_DATASET_VERSION: ${{ steps.train.outputs.INTEGRATION_DATASET_VERSION }}
      EXPERIMENT_ID: ${{ steps.train.outputs.EXPERIMENT_ID }}
      AZURE_RESOURCE_GROUP_NAME: ${{ env.AZURE_RESOURCE_GROUP_NAME }}
      AZURE_ML_WORKSPACE_NAME: ${{ env.AZURE_ML_WORKSPACE_NAME }}
      DOCKER_API_IMAGE_NAME: ${{ env.DOCKER_API_IMAGE_NAME }}
      AZURE_LOCATION: ${{ env.AZURE_LOCATION }}
      DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
      DOCKER_REPOSITORY: ${{ steps.docker-repository.outputs.DOCKER_REPOSITORY }}
    steps:
      - name: Lower Case Docker Repository
        id: docker-repository
        run: |
          DOCKER_REPOSITORY=$(echo "${{ env.DOCKER_REPOSITORY }}" | tr '[:upper:]' '[:lower:]')
          echo "DOCKER_REPOSITORY=$DOCKER_REPOSITORY" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv --version

      - name: Build packages (Makefile)
        run: |
          chmod +x ./Makefile || true
          ./Makefile || true

      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Run Train Pipeline
        working-directory: train
        run: |
          chmod +x ./setup_AzureML.sh
          ./setup
